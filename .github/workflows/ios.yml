name: iOS CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Set up Node.js (updated to version 20)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install xcpretty (for Xcode build formatting)
      - name: Install xcpretty
        run: |
          gem install xcpretty

      # Install Firebase CLI globally
      - name: Install Firebase CLI
        run: |
          npm install -g firebase-tools

      # Set up the latest stable version of Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      # Cache Firebase Emulator
      - name: Cache Firebase Emulator
        uses: actions/cache@v3
        with:
          path: ~/.cache/firebase/emulators
          key: firebase-emulator-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            firebase-emulator-${{ runner.os }}-

      # Export GOOGLE_APPLICATION_CREDENTIALS for authentication
      - name: Set GOOGLE_APPLICATION_CREDENTIALS
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" > ${{ runner.temp }}/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS="${{ runner.temp }}/gcp-key.json"
        shell: bash

      # List available simulators (for debugging)
      - name: List Available Simulators
        run: |
          xcrun simctl list devices

      # Start Firebase Emulator Suite for Firestore, Auth, and Storage
      - name: Start Firebase Emulator Suite
        run: |
          firebase emulators:start --only firestore,auth,storage --project datafight-5d0cf --import=./emulator-data --export-on-exit=./emulator-data &
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/gcp-key.json

      # Wait for Firebase Emulator to start
      - name: Wait for Firebase Emulator to Start
        run: sleep 15

      # Start the simulator manually (iPad Pro 13-inch (M4))
      - name: Start iOS Simulator
        run: |
          xcrun simctl boot "iPad Pro 13-inch (M4)"

      # Wait for the simulator to fully boot
      - name: Wait for Simulator to Boot
        run: sleep 30

      # Verify Simulator State
      - name: Verify Simulator State
        run: |
          xcrun simctl list devices | grep "iPad Pro 13-inch (M4)"

      # Resolve Swift Package Dependencies
      - name: Resolve Swift Package Dependencies
        run: |
          xcodebuild -resolvePackageDependencies \
            -project datafight.xcodeproj

      # Build and Test with environment variable for iPad Pro (13-inch) (M4)
      - name: Build and Test with Environment Variable
        run: |
          xcodebuild test \
            -project datafight.xcodeproj \
            -scheme datafight \
            -destination 'platform=iOS Simulator,OS=17.5,id=979F0FB8-8856-4AAD-9875-11211725C919' \
            CODE_SIGNING_ALLOWED=NO \
            -skipPackagePluginValidation \
            -retry-tests-on-failure \
            -test-timeouts-enabled NO \
            -timeout=1800
        env:
          IS_TESTING: "yes"

      # Stop Firebase Emulator Suite after tests
      - name: Stop Firebase Emulator Suite
        run: |
          firebase emulators:stop

      # Debug Directory Structure
      - name: Debug Directory Structure
        run: |
          ls -R ${{ github.workspace }}
          ls -R ${{ github.workspace }}/build

      # Fetch Simulator Logs for debugging
      - name: Fetch Simulator Logs
        run: |
          xcrun simctl spawn booted log collect --output sim_logs.log
          cat sim_logs.log

      # Package App and Tests (if needed)
      - name: Package App and Tests
        run: |
          mkdir -p Payload
          cp -r ${{ github.workspace }}/build/Debug-iphonesimulator/datafight.app Payload/
          zip -r app.ipa Payload

          cd ${{ github.workspace }}/build/Debug-iphonesimulator
          zip -r ${{ github.workspace }}/tests.zip datafightTests.xctest
